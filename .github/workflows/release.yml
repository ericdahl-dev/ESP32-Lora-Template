name: Release Build

on:
  push:
    tags:
      - 'v*'
    paths:
      - 'src/**'
      - 'include/**'
      - '**/platformio.ini'
      - '**/lib_deps'
      - 'requirements.txt'
      - '!SESSION_NOTES.md'
      - '!README.md'
      - '!docs/**'
      - '!*.md'

# Add permissions block to fix the 403 error
permissions:
  contents: write
  actions: read

jobs:
  release-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [sender, receiver]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Cache PlatformIO Core & Libraries
      uses: actions/cache@v4
      with:
        path: |
          ~/.platformio
          .pio/libdeps
        key: ${{ runner.os }}-pio-release-${{ matrix.environment }}-${{ hashFiles('**/platformio.ini', '**/lib_deps') }}
        restore-keys: |
          ${{ runner.os }}-pio-release-${{ matrix.environment }}-
          ${{ runner.os }}-pio-release-
          ${{ runner.os }}-pio-

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-release-${{ hashFiles('**/requirements.txt') }}-platformio
        restore-keys: |
          ${{ runner.os }}-pip-release-platformio
          ${{ runner.os }}-pip-release-
          ${{ runner.os }}-pip-platformio
          ${{ runner.os }}-pip-

    # Note: Build artifacts cache removed - releases are unique builds that can't be cached
    # The cache key would change every time due to new commits, making it ineffective

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio

    - name: Install Dependencies
      run: |
        # Check if libraries already exist to avoid redundant installs
        if [ ! -d ".pio/libdeps/${{ matrix.environment }}/RadioLib" ]; then
          pio lib install "jgromes/RadioLib@^6.5.0"
        fi
        if [ ! -d ".pio/libdeps/${{ matrix.environment }}/U8g2" ]; then
          pio lib install "olikraus/U8g2@^2.36.0"
        fi

    # Build firmware for this specific release
    # No caching here since each release is a unique build with different source code
    - name: Build ${{ matrix.environment }} Firmware
      run: |
        pio run -e ${{ matrix.environment }}

    - name: Prepare Release Artifacts
      run: |
        # Create release directory
        mkdir -p release_artifacts

        # Copy firmware binary
        cp .pio/build/${{ matrix.environment }}/firmware.bin release_artifacts/${{ matrix.environment }}_firmware.bin

        # Create ESP32 web flasher compatible manifest
        cat > release_artifacts/${{ matrix.environment }}_manifest.json << EOF
        {
          "name": "SBT PIO Heltec V3 OLED - ${{ matrix.environment }}",
          "version": "${{ github.ref_name }}",
          "description": "Firmware for Heltec WiFi LoRa 32 V3 board - ${{ matrix.environment }} role",
          "url": "https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}",
          "files": [
            {
              "name": "${{ matrix.environment }}_firmware.bin",
              "size": $(stat -c%s .pio/build/${{ matrix.environment }}/firmware.bin),
              "offset": "0x10000"
            }
          ],
          "chipFamily": "ESP32",
          "targets": ["esp32"]
        }
        EOF

        # Note: Web flasher HTML files are now hosted on GitHub Pages
        # Visit: https://skeyelab.github.io/LightningDetector/

    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.environment }}-release-artifacts
        path: release_artifacts/
        retention-days: 90

  create-release:
    runs-on: ubuntu-latest
    needs: release-build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download Sender Artifacts
      uses: actions/download-artifact@v4
      with:
        name: sender-release-artifacts
        path: sender_artifacts/

    - name: Download Receiver Artifacts
      uses: actions/download-artifact@v4
      with:
        name: receiver-release-artifacts
        path: receiver_artifacts/

    - name: Prepare Release Files
      run: |
        # Create combined release directory
        mkdir -p release_artifacts

        # Copy sender artifacts
        cp sender_artifacts/* release_artifacts/

        # Copy receiver artifacts
        cp receiver_artifacts/* release_artifacts/

        # List all files for debugging
        echo "Files in release_artifacts:"
        ls -la release_artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## SBT PIO Heltec V3 OLED Firmware Release

          This release contains firmware binaries for both sender and receiver roles.

          ### What's New
          - Firmware version: ${{ github.ref_name }}
          - Built for Heltec WiFi LoRa 32 V3 board
          - Compatible with ESP32 web flasher tools

          ### Files Included
          - **Sender Firmware**: `sender_firmware.bin` - For devices that send LoRa messages
          - **Receiver Firmware**: `receiver_firmware.bin` - For devices that receive LoRa messages and support OTA updates

          ### Flashing Instructions
          1. Download the appropriate firmware for your device role
          2. Use ESP32 web flasher or esptool to flash the binary
          3. Set flash offset to 0x10000

          ### Web Flasher
          **🌐 Use our centralized web flasher**: [https://skeyelab.github.io/LightningDetector/](https://skeyelab.github.io/LightningDetector/)

          The web flasher automatically detects this release and provides:
          - Easy firmware selection (sender/receiver)
          - Direct download from this release
          - Progress tracking during flashing
          - No software installation required

          ### Build Information
          - Built on: ${{ runner.os }}
          - Build date: ${{ github.event.head_commit.timestamp }}
          - Commit: ${{ github.sha }}

        files: |
          release_artifacts/sender_firmware.bin
          release_artifacts/sender_manifest.json
          release_artifacts/receiver_firmware.bin
          release_artifacts/receiver_manifest.json
        draft: false
        prerelease: false
